Todo:

Ideas for efficiency:
-hdeg by hdeg find out all paths between all critical cells at once. Do this with higher memory usage. 
-Try to use a (semi)-global dictionary for path finding
-improve matched down to not try to look at the same L over and over again
-multithreading
-on positive braids and words with ones at the start of the word, remove the ones and do the path analysis with that

Other things:
-test old and new paths
-on path and cell analysis, divide the paths into sets/dicts/arrays of (start_vertex,end_vertex,first_L) and find out a way to print them















SOME TRASH

get statistics while running:
python3 -m cProfile -s time braidalgo.py abcabcabcabcabcabc

interesting braid? 

s_1^2s_2^2s_1^3s_2^2s_1s_3s_2^2s_4^2s_3s_1^2s_2^2s_1^3s_2^3s_1^2s_3s_2^2s_4^3s_3^2
=aabbaaabbacaaddcaabbaaabbbaacbbdddcc 







s_1^2s_2^2s_1^3s_2^2s_1
aabbaaabba

s_3s_2^2s_4^2s_3
caaddc
s_1^2s_2^2s_1^3
aabbaaa
s_2^3s_1^2s_3
bbbaac
s_2^2s_4^3s_3^2
bbdddcc



aabbaaabbacaaddcaabbaaabbbaacbbdddcc
aabbaaabbacaaddcaabbaaabbbaacbbdddcc